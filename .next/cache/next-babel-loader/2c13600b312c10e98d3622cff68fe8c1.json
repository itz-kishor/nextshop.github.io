{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Orders from '../../../models/orderModel';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createOrder(req, res);\n      break;\n\n    case \"GET\":\n      await getOrders(req, res);\n      break;\n  }\n});\n\nconst getOrders = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    let orders;\n\n    if (result.role !== 'admin') {\n      orders = await Orders.find({\n        user: result.id\n      }).populate(\"user\", \"-password\");\n    } else {\n      orders = await Orders.find().populate(\"user\", \"-password\");\n    }\n\n    res.json({\n      orders\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst createOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      address,\n      mobile,\n      cart,\n      total\n    } = req.body;\n    const newOrder = new Orders({\n      user: result.id,\n      address,\n      mobile,\n      cart,\n      total\n    });\n    cart.filter(item => {\n      return sold(item._id, item.quantity, item.inStock, item.sold);\n    });\n    await newOrder.save();\n    res.json({\n      msg: 'Order success! We will contact you to confirm the order.',\n      newOrder\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst sold = async (id, quantity, oldInStock, oldSold) => {\n  await Products.findOneAndUpdate({\n    _id: id\n  }, {\n    inStock: oldInStock - quantity,\n    sold: quantity + oldSold\n  });\n};","map":{"version":3,"sources":["E:/nextjs-ecommerce/pages/api/order/index.js"],"names":["connectDB","Orders","Products","auth","req","res","method","createOrder","getOrders","result","orders","role","find","user","id","populate","json","err","status","message","address","mobile","cart","total","body","newOrder","filter","item","sold","_id","quantity","inStock","save","msg","oldInStock","oldSold","findOneAndUpdate"],"mappings":"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","sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Orders from '../../../models/orderModel'\r\nimport Products from '../../../models/productModel'\r\nimport auth from '../../../middleware/auth'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"POST\":\r\n            await createOrder(req, res)\r\n            break;\r\n        case \"GET\":\r\n            await getOrders(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst getOrders = async (req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n\r\n        let orders;\r\n        if(result.role !== 'admin'){\r\n            orders = await Orders.find({user: result.id}).populate(\"user\", \"-password\")\r\n        }else{\r\n            orders = await Orders.find().populate(\"user\", \"-password\")\r\n        }\r\n\r\n        res.json({orders})\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}\r\n\r\nconst createOrder = async (req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        const { address, mobile, cart, total } = req.body\r\n\r\n        const newOrder = new Orders({\r\n            user: result.id, address, mobile, cart, total\r\n        })\r\n\r\n        cart.filter(item => {\r\n            return sold(item._id, item.quantity, item.inStock, item.sold)\r\n        })\r\n\r\n        await newOrder.save()\r\n\r\n        res.json({\r\n            msg: 'Order success! We will contact you to confirm the order.',\r\n            newOrder\r\n        })\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}\r\n\r\nconst sold = async (id, quantity, oldInStock, oldSold) => {\r\n    await Products.findOneAndUpdate({_id: id}, {\r\n        inStock: oldInStock - quantity,\r\n        sold: quantity + oldSold\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}