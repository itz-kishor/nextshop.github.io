{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport { useContext, useState, useEffect } from 'react';\nimport { DataContext } from '../store/GlobalState';\nimport CartItem from '../components/CartItem';\nimport Link from 'next/link';\nimport { getData, postData } from '../utils/fetchData';\nimport { useRouter } from 'next/router';\n\nconst Cart = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(DataContext);\n  const {\n    cart,\n    auth,\n    orders\n  } = state;\n  const {\n    0: total,\n    1: setTotal\n  } = useState(0);\n  const {\n    0: address,\n    1: setAddress\n  } = useState('');\n  const {\n    0: mobile,\n    1: setMobile\n  } = useState('');\n  const {\n    0: callback,\n    1: setCallback\n  } = useState(false);\n  const router = useRouter();\n  useEffect(() => {\n    const getTotal = () => {\n      const res = cart.reduce((prev, item) => {\n        return prev + item.price * item.quantity;\n      }, 0);\n      setTotal(res);\n    };\n\n    getTotal();\n  }, [cart]);\n  useEffect(() => {\n    const cartLocal = JSON.parse(localStorage.getItem('__next__cart01__devat'));\n\n    if (cartLocal && cartLocal.length > 0) {\n      let newArr = [];\n\n      const updateCart = async () => {\n        for (const item of cartLocal) {\n          const res = await getData(`product/${item._id}`);\n          const {\n            _id,\n            title,\n            images,\n            price,\n            inStock,\n            sold\n          } = res.product;\n\n          if (inStock > 0) {\n            newArr.push({\n              _id,\n              title,\n              images,\n              price,\n              inStock,\n              sold,\n              quantity: item.quantity > inStock ? 1 : item.quantity\n            });\n          }\n        }\n\n        dispatch({\n          type: 'ADD_CART',\n          payload: newArr\n        });\n      };\n\n      updateCart();\n    }\n  }, [callback]);\n\n  const handlePayment = async () => {\n    if (!address || !mobile) return dispatch({\n      type: 'NOTIFY',\n      payload: {\n        error: 'Please add your address and mobile.'\n      }\n    });\n    let newCart = [];\n\n    for (const item of cart) {\n      const res = await getData(`product/${item._id}`);\n\n      if (res.product.inStock - item.quantity >= 0) {\n        newCart.push(item);\n      }\n    }\n\n    if (newCart.length < cart.length) {\n      setCallback(!callback);\n      return dispatch({\n        type: 'NOTIFY',\n        payload: {\n          error: 'The product is out of stock or the quantity is insufficient.'\n        }\n      });\n    }\n\n    dispatch({\n      type: 'NOTIFY',\n      payload: {\n        loading: true\n      }\n    });\n    postData('order', {\n      address,\n      mobile,\n      cart,\n      total\n    }, auth.token).then(res => {\n      if (res.err) return dispatch({\n        type: 'NOTIFY',\n        payload: {\n          error: res.err\n        }\n      });\n      dispatch({\n        type: 'ADD_CART',\n        payload: []\n      });\n\n      const newOrder = _objectSpread(_objectSpread({}, res.newOrder), {}, {\n        user: auth.user\n      });\n\n      dispatch({\n        type: 'ADD_ORDERS',\n        payload: [...orders, newOrder]\n      });\n      dispatch({\n        type: 'NOTIFY',\n        payload: {\n          success: res.msg\n        }\n      });\n      return router.push(`/order/${res.newOrder._id}`);\n    });\n  };\n\n  if (cart.length === 0) return /*#__PURE__*/_jsx(\"img\", {\n    className: \"img-responsive w-100\",\n    src: \"/empty_cart.jpg\",\n    alt: \"not empty\"\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"row mx-auto\",\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Cart Page\"\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"col-md-8 text-secondary table-responsive my-3\",\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        className: \"text-uppercase\",\n        children: \"Shopping Cart\"\n      }), /*#__PURE__*/_jsx(\"table\", {\n        className: \"table my-3\",\n        children: /*#__PURE__*/_jsx(\"tbody\", {\n          children: cart.map(item => /*#__PURE__*/_jsx(CartItem, {\n            item: item,\n            dispatch: dispatch,\n            cart: cart\n          }, item._id))\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"col-md-4 my-3 text-right text-uppercase text-secondary\",\n      children: [/*#__PURE__*/_jsxs(\"form\", {\n        children: [/*#__PURE__*/_jsx(\"h2\", {\n          children: \"Shipping\"\n        }), /*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"address\",\n          children: \"Address\"\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          id: \"address\",\n          className: \"form-control mb-2\",\n          value: address,\n          onChange: e => setAddress(e.target.value)\n        }), /*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"mobile\",\n          children: \"Mobile\"\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          name: \"mobile\",\n          id: \"mobile\",\n          className: \"form-control mb-2\",\n          value: mobile,\n          onChange: e => setMobile(e.target.value)\n        })]\n      }), /*#__PURE__*/_jsxs(\"h3\", {\n        children: [\"Total: \", /*#__PURE__*/_jsxs(\"span\", {\n          className: \"text-danger\",\n          children: [\"\\u20B9\", total]\n        })]\n      }), /*#__PURE__*/_jsx(Link, {\n        href: auth.user ? '#!' : '/signin',\n        children: /*#__PURE__*/_jsx(\"a\", {\n          className: \"btn btn-dark my-2\",\n          onClick: handlePayment,\n          children: \"Proceed with payment\"\n        })\n      })]\n    })]\n  });\n};\n\nexport default Cart;","map":null,"metadata":{},"sourceType":"module"}