{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport bcrypt from 'bcrypt';\nimport { createAccessToken, createRefreshToken } from '../../../utils/generateToken';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await login(req, res);\n      break;\n  }\n});\n\nconst login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await Users.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      err: 'This user does not exist.'\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      err: 'Incorrect password.'\n    });\n    const access_token = createAccessToken({\n      id: user._id\n    });\n    const refresh_token = createRefreshToken({\n      id: user._id\n    });\n    res.json({\n      msg: \"Login Success!\",\n      refresh_token,\n      access_token,\n      user: {\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        avatar: user.avatar,\n        root: user.root\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["E:/nextjs-ecommerce/pages/api/auth/login.js"],"names":["connectDB","Users","bcrypt","createAccessToken","createRefreshToken","req","res","method","login","email","password","body","user","findOne","status","json","err","isMatch","compare","access_token","id","_id","refresh_token","msg","name","role","avatar","root","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,8BAAtD;AAGAJ,SAAS;AAET,gBAAe,OAAOK,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,MAAL;AACI,YAAMC,KAAK,CAACH,GAAD,EAAMC,GAAN,CAAX;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,KAAK,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AAC9B,MAAG;AACC,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBL,GAAG,CAACM,IAAhC;AAEA,UAAMC,IAAI,GAAG,MAAMX,KAAK,CAACY,OAAN,CAAc;AAAEJ,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAG,CAACG,IAAJ,EAAU,OAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AAEV,UAAMC,OAAO,GAAG,MAAMf,MAAM,CAACgB,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAAtB;AACA,QAAG,CAACO,OAAJ,EAAa,OAAOX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AAEb,UAAMG,YAAY,GAAGhB,iBAAiB,CAAC;AAACiB,MAAAA,EAAE,EAAER,IAAI,CAACS;AAAV,KAAD,CAAtC;AACA,UAAMC,aAAa,GAAGlB,kBAAkB,CAAC;AAACgB,MAAAA,EAAE,EAAER,IAAI,CAACS;AAAV,KAAD,CAAxC;AAEAf,IAAAA,GAAG,CAACS,IAAJ,CAAS;AACLQ,MAAAA,GAAG,EAAE,gBADA;AAELD,MAAAA,aAFK;AAGLH,MAAAA,YAHK;AAILP,MAAAA,IAAI,EAAE;AACFY,QAAAA,IAAI,EAAEZ,IAAI,CAACY,IADT;AAEFf,QAAAA,KAAK,EAAEG,IAAI,CAACH,KAFV;AAGFgB,QAAAA,IAAI,EAAEb,IAAI,CAACa,IAHT;AAIFC,QAAAA,MAAM,EAAEd,IAAI,CAACc,MAJX;AAKFC,QAAAA,IAAI,EAAEf,IAAI,CAACe;AALT;AAJD,KAAT;AAaH,GAzBD,CAyBC,OAAMX,GAAN,EAAU;AACP,WAAOV,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEA,GAAG,CAACY;AAAV,KAArB,CAAP;AACH;AACJ,CA7BD","sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Users from '../../../models/userModel'\r\nimport bcrypt from 'bcrypt'\r\nimport { createAccessToken, createRefreshToken } from '../../../utils/generateToken'\r\n\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"POST\":\r\n            await login(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    try{\r\n        const { email, password } = req.body\r\n\r\n        const user = await Users.findOne({ email })\r\n        if(!user) return res.status(400).json({err: 'This user does not exist.'})\r\n\r\n        const isMatch = await bcrypt.compare(password, user.password)\r\n        if(!isMatch) return res.status(400).json({err: 'Incorrect password.'})\r\n\r\n        const access_token = createAccessToken({id: user._id})\r\n        const refresh_token = createRefreshToken({id: user._id})\r\n        \r\n        res.json({\r\n            msg: \"Login Success!\",\r\n            refresh_token,\r\n            access_token,\r\n            user: {\r\n                name: user.name,\r\n                email: user.email,\r\n                role: user.role,\r\n                avatar: user.avatar,\r\n                root: user.root\r\n            }\r\n        })\r\n\r\n    }catch(err){\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}