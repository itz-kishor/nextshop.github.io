{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await getProduct(req, res);\n      break;\n\n    case \"PUT\":\n      await updateProduct(req, res);\n      break;\n\n    case \"DELETE\":\n      await deleteProduct(req, res);\n      break;\n  }\n});\n\nconst getProduct = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.query;\n    const product = await Products.findById(id);\n    if (!product) return res.status(400).json({\n      err: 'This product does not exist.'\n    });\n    res.json({\n      product\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst updateProduct = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      id\n    } = req.query;\n    const {\n      title,\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    } = req.body;\n    if (!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0) return res.status(400).json({\n      err: 'Please add all the fields.'\n    });\n    await Products.findOneAndUpdate({\n      _id: id\n    }, {\n      title: title.toLowerCase(),\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    });\n    res.json({\n      msg: 'Success! Updated a product'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst deleteProduct = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      id\n    } = req.query;\n    await Products.findByIdAndDelete(id);\n    res.json({\n      msg: 'Deleted a product.'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["E:/nextjs-ecommerce/pages/api/product/[id].js"],"names":["connectDB","Products","auth","req","res","method","getProduct","updateProduct","deleteProduct","id","query","product","findById","status","json","err","message","result","role","title","price","inStock","description","content","category","images","body","length","findOneAndUpdate","_id","toLowerCase","msg","findByIdAndDelete"],"mappings":"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","sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Products from '../../../models/productModel'\r\nimport auth from '../../../middleware/auth'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"GET\":\r\n            await getProduct(req, res)\r\n            break;\r\n        case \"PUT\":\r\n            await updateProduct(req, res)\r\n            break;\r\n        case \"DELETE\":\r\n            await deleteProduct(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst getProduct = async (req, res) => {\r\n    try {\r\n        const { id } = req.query;\r\n\r\n        const product = await Products.findById(id)\r\n        if(!product) return res.status(400).json({err: 'This product does not exist.'})\r\n        \r\n        res.json({ product })\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}\r\n\r\nconst updateProduct = async (req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        if(result.role !== 'admin') \r\n        return res.status(400).json({err: 'Authentication is not valid.'})\r\n\r\n        const {id} = req.query\r\n        const {title, price, inStock, description, content, category, images} = req.body\r\n\r\n        if(!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0)\r\n        return res.status(400).json({err: 'Please add all the fields.'})\r\n\r\n        await Products.findOneAndUpdate({_id: id}, {\r\n            title: title.toLowerCase(), price, inStock, description, content, category, images\r\n        })\r\n\r\n        res.json({msg: 'Success! Updated a product'})\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}\r\n\r\nconst deleteProduct = async(req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        \r\n        if(result.role !== 'admin') \r\n        return res.status(400).json({err: 'Authentication is not valid.'})\r\n\r\n        const {id} = req.query\r\n\r\n        await Products.findByIdAndDelete(id)\r\n        res.json({msg: 'Deleted a product.'})\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}