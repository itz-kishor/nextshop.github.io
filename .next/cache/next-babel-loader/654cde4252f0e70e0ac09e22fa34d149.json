{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await uploadInfor(req, res);\n      break;\n\n    case \"GET\":\n      await getUsers(req, res);\n      break;\n  }\n});\n\nconst getUsers = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: \"Authentication is not valid\"\n    });\n    const users = await Users.find().select('-password');\n    res.json({\n      users\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst uploadInfor = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      name,\n      avatar\n    } = req.body;\n    const newUser = await Users.findOneAndUpdate({\n      _id: result.id\n    }, {\n      name,\n      avatar\n    });\n    res.json({\n      msg: \"Update Success!\",\n      user: {\n        name,\n        avatar,\n        email: newUser.email,\n        role: newUser.role\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hira sarkar/Desktop/New folder/nextjs-ecommerce/pages/api/user/index.js"],"names":["connectDB","Users","auth","req","res","method","uploadInfor","getUsers","result","role","status","json","err","users","find","select","message","name","avatar","body","newUser","findOneAndUpdate","_id","id","msg","user","email"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEAF,SAAS;AAET,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,OAAL;AACI,YAAMC,WAAW,CAACH,GAAD,EAAMC,GAAN,CAAjB;AACA;;AACJ,SAAK,KAAL;AACI,YAAMG,QAAQ,CAACJ,GAAD,EAAMC,GAAN,CAAd;AACA;AANR;AAQH,CATD;;AAWA,MAAMG,QAAQ,GAAG,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACD,UAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;AACA,QAAGI,MAAM,CAACC,IAAP,KAAgB,OAAnB,EACA,OAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AAEC,UAAMC,KAAK,GAAG,MAAMZ,KAAK,CAACa,IAAN,GAAaC,MAAb,CAAoB,WAApB,CAApB;AACAX,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAACE,MAAAA;AAAD,KAAT;AAEH,GARD,CAQE,OAAOD,GAAP,EAAY;AACV,WAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEA,GAAG,CAACI;AAAV,KAArB,CAAP;AACH;AACJ,CAZD;;AAeA,MAAMV,WAAW,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACpC,MAAI;AACA,UAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;AACA,UAAM;AAACa,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAiBf,GAAG,CAACgB,IAA3B;AAEA,UAAMC,OAAO,GAAG,MAAMnB,KAAK,CAACoB,gBAAN,CAAuB;AAACC,MAAAA,GAAG,EAAEd,MAAM,CAACe;AAAb,KAAvB,EAAyC;AAACN,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAzC,CAAtB;AAEAd,IAAAA,GAAG,CAACO,IAAJ,CAAS;AACLa,MAAAA,GAAG,EAAE,iBADA;AAELC,MAAAA,IAAI,EAAE;AACFR,QAAAA,IADE;AAEFC,QAAAA,MAFE;AAGFQ,QAAAA,KAAK,EAAEN,OAAO,CAACM,KAHb;AAIFjB,QAAAA,IAAI,EAAEW,OAAO,CAACX;AAJZ;AAFD,KAAT;AASH,GAfD,CAeE,OAAOG,GAAP,EAAY;AACV,WAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEA,GAAG,CAACI;AAAV,KAArB,CAAP;AACH;AACJ,CAnBD","sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Users from '../../../models/userModel'\r\nimport auth from '../../../middleware/auth'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"PATCH\":\r\n            await uploadInfor(req, res)\r\n            break;\r\n        case \"GET\":\r\n            await getUsers(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst getUsers = async (req, res) => {\r\n    try {\r\n       const result = await auth(req, res)\r\n       if(result.role !== 'admin') \r\n       return res.status(400).json({err: \"Authentication is not valid\"})\r\n\r\n        const users = await Users.find().select('-password')\r\n        res.json({users})\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}\r\n\r\n\r\nconst uploadInfor = async (req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        const {name, avatar} = req.body\r\n\r\n        const newUser = await Users.findOneAndUpdate({_id: result.id}, {name, avatar})\r\n\r\n        res.json({\r\n            msg: \"Update Success!\",\r\n            user: {\r\n                name,\r\n                avatar,\r\n                email: newUser.email,\r\n                role: newUser.role\r\n            }\r\n        })\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}