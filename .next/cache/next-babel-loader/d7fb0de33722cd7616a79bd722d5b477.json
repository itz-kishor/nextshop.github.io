{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport valid from '../../../utils/valid';\nimport bcrypt from 'bcrypt';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await register(req, res);\n      break;\n  }\n});\n\nconst register = async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password,\n      cf_password\n    } = req.body;\n    const errMsg = valid(name, email, password, cf_password);\n    if (errMsg) return res.status(400).json({\n      err: errMsg\n    });\n    const user = await Users.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      err: 'This email already exists.'\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    const newUser = new Users({\n      name,\n      email,\n      password: passwordHash,\n      cf_password\n    });\n    await newUser.save();\n    res.json({\n      msg: \"Register Success!\"\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hira sarkar/Desktop/New folder/nextjs-ecommerce/pages/api/auth/register.js"],"names":["connectDB","Users","valid","bcrypt","req","res","method","register","name","email","password","cf_password","body","errMsg","status","json","err","user","findOne","passwordHash","hash","newUser","save","msg","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,MAAL;AACI,YAAMC,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAd;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAG;AACC,UAAM;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA;AAAzB,QAAyCP,GAAG,CAACQ,IAAnD;AAEA,UAAMC,MAAM,GAAGX,KAAK,CAACM,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwBC,WAAxB,CAApB;AACA,QAAGE,MAAH,EAAW,OAAOR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEH;AAAN,KAArB,CAAP;AAEX,UAAMI,IAAI,GAAG,MAAMhB,KAAK,CAACiB,OAAN,CAAc;AAAET,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAGQ,IAAH,EAAS,OAAOZ,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AAET,UAAMG,YAAY,GAAG,MAAMhB,MAAM,CAACiB,IAAP,CAAYV,QAAZ,EAAsB,EAAtB,CAA3B;AAEA,UAAMW,OAAO,GAAG,IAAIpB,KAAJ,CAAU;AACtBO,MAAAA,IADsB;AAChBC,MAAAA,KADgB;AACTC,MAAAA,QAAQ,EAAES,YADD;AACeR,MAAAA;AADf,KAAV,CAAhB;AAIA,UAAMU,OAAO,CAACC,IAAR,EAAN;AACAjB,IAAAA,GAAG,CAACU,IAAJ,CAAS;AAACQ,MAAAA,GAAG,EAAE;AAAN,KAAT;AAEH,GAlBD,CAkBC,OAAMP,GAAN,EAAU;AACP,WAAOX,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEA,GAAG,CAACQ;AAAV,KAArB,CAAP;AACH;AACJ,CAtBD","sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Users from '../../../models/userModel'\r\nimport valid from '../../../utils/valid'\r\nimport bcrypt from 'bcrypt'\r\n\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"POST\":\r\n            await register(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst register = async (req, res) => {\r\n    try{\r\n        const { name, email, password, cf_password } = req.body\r\n\r\n        const errMsg = valid(name, email, password, cf_password)\r\n        if(errMsg) return res.status(400).json({err: errMsg})\r\n\r\n        const user = await Users.findOne({ email })\r\n        if(user) return res.status(400).json({err: 'This email already exists.'})\r\n\r\n        const passwordHash = await bcrypt.hash(password, 12)\r\n\r\n        const newUser = new Users({ \r\n            name, email, password: passwordHash, cf_password \r\n        })\r\n\r\n        await newUser.save()\r\n        res.json({msg: \"Register Success!\"})\r\n\r\n    }catch(err){\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}