{"ast":null,"code":"import connectDB from '../../../../utils/connectDB';\nimport Orders from '../../../../models/orderModel';\nimport auth from '../../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await deliveredOrder(req, res);\n      break;\n  }\n});\n\nconst deliveredOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      id\n    } = req.query;\n    const order = await Orders.findOne({\n      _id: id\n    });\n\n    if (order.paid) {\n      await Orders.findOneAndUpdate({\n        _id: id\n      }, {\n        delivered: true\n      });\n      res.json({\n        msg: 'Updated success!',\n        result: {\n          paid: true,\n          dateOfPayment: order.dateOfPayment,\n          method: order.method,\n          delivered: true\n        }\n      });\n    } else {\n      await Orders.findOneAndUpdate({\n        _id: id\n      }, {\n        paid: true,\n        dateOfPayment: new Date().toISOString(),\n        method: 'Receive Cash',\n        delivered: true\n      });\n      res.json({\n        msg: 'Updated success!',\n        result: {\n          paid: true,\n          dateOfPayment: new Date().toISOString(),\n          method: 'Receive Cash',\n          delivered: true\n        }\n      });\n    }\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hira sarkar/Desktop/New folder/nextjs-ecommerce/pages/api/order/delivered/[id].js"],"names":["connectDB","Orders","auth","req","res","method","deliveredOrder","result","role","status","json","err","id","query","order","findOne","_id","paid","findOneAndUpdate","delivered","msg","dateOfPayment","Date","toISOString","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AAEAF,SAAS;AAET,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,OAAL;AACI,YAAMC,cAAc,CAACH,GAAD,EAAMC,GAAN,CAApB;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,cAAc,GAAG,OAAMH,GAAN,EAAWC,GAAX,KAAmB;AACtC,MAAI;AACA,UAAMG,MAAM,GAAG,MAAML,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;AACA,QAAGG,MAAM,CAACC,IAAP,KAAgB,OAAnB,EACA,OAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AACA,UAAM;AAACC,MAAAA;AAAD,QAAOT,GAAG,CAACU,KAAjB;AAGA,UAAMC,KAAK,GAAG,MAAMb,MAAM,CAACc,OAAP,CAAe;AAACC,MAAAA,GAAG,EAAEJ;AAAN,KAAf,CAApB;;AACA,QAAGE,KAAK,CAACG,IAAT,EAAc;AACV,YAAMhB,MAAM,CAACiB,gBAAP,CAAwB;AAACF,QAAAA,GAAG,EAAEJ;AAAN,OAAxB,EAAmC;AAACO,QAAAA,SAAS,EAAE;AAAZ,OAAnC,CAAN;AAEAf,MAAAA,GAAG,CAACM,IAAJ,CAAS;AACLU,QAAAA,GAAG,EAAE,kBADA;AAELb,QAAAA,MAAM,EAAE;AACJU,UAAAA,IAAI,EAAE,IADF;AAEJI,UAAAA,aAAa,EAAEP,KAAK,CAACO,aAFjB;AAGJhB,UAAAA,MAAM,EAAES,KAAK,CAACT,MAHV;AAIJc,UAAAA,SAAS,EAAE;AAJP;AAFH,OAAT;AASH,KAZD,MAYK;AACD,YAAMlB,MAAM,CAACiB,gBAAP,CAAwB;AAACF,QAAAA,GAAG,EAAEJ;AAAN,OAAxB,EAAmC;AACrCK,QAAAA,IAAI,EAAE,IAD+B;AACzBI,QAAAA,aAAa,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EADU;AAErClB,QAAAA,MAAM,EAAE,cAF6B;AAEbc,QAAAA,SAAS,EAAE;AAFE,OAAnC,CAAN;AAKAf,MAAAA,GAAG,CAACM,IAAJ,CAAS;AACLU,QAAAA,GAAG,EAAE,kBADA;AAELb,QAAAA,MAAM,EAAE;AACJU,UAAAA,IAAI,EAAE,IADF;AAEJI,UAAAA,aAAa,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFX;AAGJlB,UAAAA,MAAM,EAAE,cAHJ;AAIJc,UAAAA,SAAS,EAAE;AAJP;AAFH,OAAT;AASH;AAEJ,GArCD,CAqCE,OAAOR,GAAP,EAAY;AACV,WAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEA,GAAG,CAACa;AAAV,KAArB,CAAP;AACH;AACJ,CAzCD","sourcesContent":["import connectDB from '../../../../utils/connectDB'\r\nimport Orders from '../../../../models/orderModel'\r\nimport auth from '../../../../middleware/auth'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"PATCH\":\r\n            await deliveredOrder(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst deliveredOrder = async(req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        if(result.role !== 'admin')\r\n        return res.status(400).json({err: 'Authentication is not valid.'})\r\n        const {id} = req.query\r\n\r\n\r\n        const order = await Orders.findOne({_id: id})\r\n        if(order.paid){\r\n            await Orders.findOneAndUpdate({_id: id}, {delivered: true})\r\n    \r\n            res.json({\r\n                msg: 'Updated success!',\r\n                result: {\r\n                    paid: true, \r\n                    dateOfPayment: order.dateOfPayment, \r\n                    method: order.method, \r\n                    delivered: true\r\n                }\r\n            })\r\n        }else{\r\n            await Orders.findOneAndUpdate({_id: id}, {\r\n                paid: true, dateOfPayment: new Date().toISOString(), \r\n                method: 'Receive Cash', delivered: true\r\n            })\r\n    \r\n            res.json({\r\n                msg: 'Updated success!',\r\n                result: {\r\n                    paid: true, \r\n                    dateOfPayment: new Date().toISOString(), \r\n                    method: 'Receive Cash', \r\n                    delivered: true\r\n                }\r\n            })\r\n        }\r\n        \r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}