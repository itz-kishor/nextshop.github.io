{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport connectDB from '../../../utils/connectDB';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await getProducts(req, res);\n      break;\n\n    case \"POST\":\n      await createProduct(req, res);\n      break;\n  }\n});\n\nclass APIfeatures {\n  constructor(query, queryString) {\n    this.query = query;\n    this.queryString = queryString;\n  }\n\n  filtering() {\n    const queryObj = _objectSpread({}, this.queryString);\n\n    const excludeFields = ['page', 'sort', 'limit'];\n    excludeFields.forEach(el => delete queryObj[el]);\n    if (queryObj.category !== 'all') this.query.find({\n      category: queryObj.category\n    });\n    if (queryObj.title !== 'all') this.query.find({\n      title: {\n        $regex: queryObj.title\n      }\n    });\n    this.query.find();\n    return this;\n  }\n\n  sorting() {\n    if (this.queryString.sort) {\n      const sortBy = this.queryString.sort.split(',').join('');\n      this.query = this.query.sort(sortBy);\n    } else {\n      this.query = this.query.sort('-createdAt');\n    }\n\n    return this;\n  }\n\n  paginating() {\n    const page = this.queryString.page * 1 || 1;\n    const limit = this.queryString.limit * 1 || 6;\n    const skip = (page - 1) * limit;\n    this.query = this.query.skip(skip).limit(limit);\n    return this;\n  }\n\n}\n\nconst getProducts = async (req, res) => {\n  try {\n    const features = new APIfeatures(Products.find(), req.query).filtering().sorting().paginating();\n    const products = await features.query;\n    res.json({\n      status: 'success',\n      result: products.length,\n      products\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst createProduct = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      title,\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    } = req.body;\n    if (!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0) return res.status(400).json({\n      err: 'Please add all the fields.'\n    });\n    const newProduct = new Products({\n      title: title.toLowerCase(),\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    });\n    await newProduct.save();\n    res.json({\n      msg: 'Success! Created a new product'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}